<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-04-24T14:27:41+10:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ivan’s Development Blog</title><subtitle>I have 12 years of industry experience ranging from Linux and Oracle database adminstration to Web Application Development. My current core experiences are in the design and implementation of Restful APIs, Apigee API management solutions and complex web applications. I am also proficient in front-end development, database schema design, stored procedures and various cloud solutions.  </subtitle><entry><title type="html">Javascript closure</title><link href="http://localhost:4000/backend/Javascript-Closure-Demystified" rel="alternate" type="text/html" title="Javascript closure" /><published>2019-01-22T00:00:00+11:00</published><updated>2019-01-22T00:00:00+11:00</updated><id>http://localhost:4000/backend/Javascript-Closure-Demystified</id><content type="html" xml:base="http://localhost:4000/backend/Javascript-Closure-Demystified">&lt;p&gt;This purpose of this post is to demystify what closure is in Javascript.&lt;br /&gt;
If you are coming from a object orientated programming language background such as C# or Java, the best way you can associate 
Javascript closure that you are creating a object with private variable.&lt;/p&gt;

&lt;p&gt;The local variables are similar to your private properties such that you cannot directly access it. 
However you can expose functions using the  &lt;strong&gt;return&lt;/strong&gt;  to access and update your private variables. Those return functions are similar to your public functions in your OOP language.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function CreateCar(brand){
  
  var mileage = 0;
  
  return{
    report: function(){
      console.log(&quot;your &quot;+brand+&quot; has travelled &quot; +mileage +&quot; miles&quot;)
    },
    addMileage: function(distance){
      mileage += distance
    }
  };
    
}

var newCar = CreateCar(&quot;Merc&quot;);

newCar.report();
newCar.addMileage(20);
newCar.report();
newCar.addMileage(20);
newCar.report();

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Ivan Cai</name></author><summary type="html">This purpose of this post is to demystify what closure is in Javascript. If you are coming from a object orientated programming language background such as C# or Java, the best way you can associate Javascript closure that you are creating a object with private variable.</summary></entry><entry><title type="html">SOLID Design Principles</title><link href="http://localhost:4000/backend/SOLID-Design-principles" rel="alternate" type="text/html" title="SOLID Design Principles" /><published>2019-01-14T00:00:00+11:00</published><updated>2019-01-14T00:00:00+11:00</updated><id>http://localhost:4000/backend/SOLID-Design-principles</id><content type="html" xml:base="http://localhost:4000/backend/SOLID-Design-principles">&lt;p&gt;This post will give you a basic explanation of what the SOLID Principles are and how we can use it.&lt;/p&gt;

&lt;h3 id=&quot;why-solid&quot;&gt;Why SOLID?&lt;/h3&gt;

&lt;p&gt;As a programmer or software engineer,The main reason for adopting SOLID principles is to enable us to write easily maintainable, testable and flexible software in a methodological way.&lt;/p&gt;

&lt;h3 id=&quot;what-are-solid-principles&quot;&gt;What are SOLID principles?&lt;/h3&gt;

&lt;p&gt;SOLID is the acronym for: &lt;br /&gt;
S = &lt;strong&gt;Single&lt;/strong&gt; Responsibility Principle (SRP) &lt;br /&gt;
O = &lt;strong&gt;Open&lt;/strong&gt; closed Principle (OSP) &lt;br /&gt;
L =  &lt;strong&gt;Liskov&lt;/strong&gt; substitution Principle (LSP) &lt;br /&gt;
I  =  &lt;strong&gt;Interface&lt;/strong&gt; Segregation Principle (ISP) &lt;br /&gt;
D = &lt;strong&gt;Dependency&lt;/strong&gt; Inversion Principle (DIP)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Single Responsibility Principle:&lt;/strong&gt; Every class or module should have responsibility over just a single part of the functionality in a software system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Close Principle:&lt;/strong&gt;
“Software entities should be open for extension, but closed for modification” 
this means that software should be build with extensibility right from the beginning. &lt;br /&gt;
This principle ties strongly with the Single responsibility principle as each class or module should do just one thing and one thing well. This would reduce the need the same piece of code from rewritten again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Liskov Substitution Principle:&lt;/strong&gt;
Barbara Liskov state that “objects in a program should be replaceable with instance of the sub types without altering the correctness of that program”
An analogy is that if a passenger has requested a rental car to get her from A to B, 
car of any brand or type should satisfy her needs as it’s type of a car.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interface Segregation Principle:&lt;/strong&gt;
“Many client-specific interfaces are better than one general-purpose interface”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dependency Inversion Principle:&lt;/strong&gt;
High-level modules should not depend on low level modules.&lt;/p&gt;

&lt;p&gt;Abstractions should not depend on the details, whereas the details should depend on abstractions. 
In other words, The Abstractions are the templates or requirements provided by the higher level modules, it is up to the lower level modules to fulfil that requirement regardless of how it is implemented.&lt;/p&gt;

&lt;p&gt;###What’s next?&lt;/p&gt;

&lt;p&gt;I will create a demo in the near future to demonstrate the use of SOLID principles so tune to the blog! Thanks for your time!&lt;/p&gt;</content><author><name>Ivan Cai</name></author><summary type="html">This post will give you a basic explanation of what the SOLID Principles are and how we can use it.</summary></entry><entry><title type="html">REST API best practice - Resources</title><link href="http://localhost:4000/backend/RESTful-API-Best-Practice-1" rel="alternate" type="text/html" title="REST API best practice -  Resources" /><published>2019-01-14T00:00:00+11:00</published><updated>2019-01-14T00:00:00+11:00</updated><id>http://localhost:4000/backend/RESTful-API-Best-Practice-1</id><content type="html" xml:base="http://localhost:4000/backend/RESTful-API-Best-Practice-1">&lt;p&gt;This is the first article of many to come about REST API best practice that I will be writing over the next few weeks. This series of article assumes you have basic knowledge of RESTful API and wants to dig a little deeper into some of intricate details on how to make it better.&lt;/p&gt;

&lt;h3 id=&quot;what-is-resources&quot;&gt;What is resources?&lt;/h3&gt;

&lt;p&gt;Resources are often representation of real world entities such as customers, invoices, accounts, etc. relationship between resources are typically nested for example each customer might have multiple accounts, each account with have multiple invoices.  Resources are represented in URIs (Universal Resource Identifier)&lt;/p&gt;

&lt;h4 id=&quot;how-do-i-design-the-uris&quot;&gt;How do I design the URIs?&lt;/h4&gt;

&lt;p&gt;The general rule for URI is that it should be easily understood with plain English words. Resources must be named as nouns as oppose to verbs or actions as.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For URI Format, the forward &lt;strong&gt;slash&lt;/strong&gt; (/) used in the path portion represents the hierarchical relationship between resources. For example: 
&lt;em&gt;https://api.somecompany.com/departments/sales/employees/{employeeId}&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Hyphens&lt;/strong&gt; (-) should be used to improve the readabilities or URL
&lt;em&gt;https://api.somecompany.com/departments/it/employees/{employeeId}/recent-pay-slips&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;URI should be in lowercase letters.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;File extensions should not be included in the URLs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;URI including queries should not exceed 8000 characters as all modern web servers are recommended to have minimum 8000 URL length support.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;archetypes&quot;&gt;Archetypes&lt;/h3&gt;

&lt;p&gt;API Resource archetypes serve as a design pattern models that we can follow to design the structure and behaviours of each of our API end points. 
Four basic archetypes in API resources are &lt;strong&gt;document, collection, store&lt;/strong&gt; and &lt;strong&gt;controller&lt;/strong&gt;.
Each endpoint should on only be aligned to type to ensure separation of responsibilities and uniformity.&lt;/p&gt;

&lt;h4 id=&quot;collection&quot;&gt;Collection&lt;/h4&gt;

&lt;p&gt;A collection resource is a list of resources of zero or more of the same resource type. The resource should be plural. For example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;https://api.somecompany.com/departments&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;https://api.myonlineshop.com/products&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;document&quot;&gt;Document&lt;/h4&gt;
&lt;p&gt;A document resource is a singular object instance or a database record that typically includes both fields with values and links to other related resources. &lt;br /&gt;
For example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;https://api.somecompany.com/users/{userId}&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;https://api.myonlineshop.com/products/{productId}&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;controller&quot;&gt;Controller&lt;/h4&gt;
&lt;p&gt;Controller resource model, some referred to as processor,  is a procedural concept that cannot be mapped to create, retrieve, update and delete. A POST to a controller will perform some task or operation such as performing computations complex operations atomically.   Even though the controller performs some action the controller is a thing and the resource is still named as a noun. For example:&lt;/p&gt;

&lt;p&gt;POST  &lt;strong&gt;&lt;em&gt;https://api.myonlineshop.com/users/{userId}/password-reset&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This would trigger a reset password process for a user specified by the identified by the user Id. This will usually involve in sending a reset password email or mobile SMS to validate the end user before allowing the user update their password.   For example: &lt;br /&gt;
POST &lt;strong&gt;&lt;em&gt;https://api.myonlineshop.com/cart/{cartId}/checkout&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this case, the checkout requires a dedicated controller to accurately describe the action of the complex checkout process that a usual CRUD (Create, Retrieve, Update and Delete) operations cannot.&lt;/p&gt;

&lt;h4 id=&quot;store&quot;&gt;Store&lt;/h4&gt;
&lt;p&gt;A store resource archetype is used a client managed resource repository. It allows the client to perform CRUD action where client chooses the resource ID/URI. This archetype is not commonly used since collection type entities are usually more appropriate and sufficient in most cases.&lt;/p&gt;

&lt;p&gt;GET &lt;strong&gt;&lt;em&gt;https://api.mymovieflix.com.au/users/{userId}/favourite-movie&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
PUT &lt;strong&gt;&lt;em&gt;https://api.mymovieflix.com.au/users/{userId}/favourite-movie/groundhog-day&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That’s it for now, stay tune for more future blog on REST API best practice series.&lt;/p&gt;</content><author><name>Ivan Cai</name></author><summary type="html">This is the first article of many to come about REST API best practice that I will be writing over the next few weeks. This series of article assumes you have basic knowledge of RESTful API and wants to dig a little deeper into some of intricate details on how to make it better.</summary></entry><entry><title type="html">.NET Quick reference</title><link href="http://localhost:4000/backend/DOTNET-Quick-Reference" rel="alternate" type="text/html" title=".NET Quick reference" /><published>2019-01-11T00:00:00+11:00</published><updated>2019-01-11T00:00:00+11:00</updated><id>http://localhost:4000/backend/DOTNET-Quick-Reference</id><content type="html" xml:base="http://localhost:4000/backend/DOTNET-Quick-Reference">&lt;p&gt;Krestrel Server - &lt;a href=&quot;https://webpifeed.blob.core.windows.net/webpifeed/Partners/Kestrel_1.1.pdf&quot;&gt;https://webpifeed.blob.core.windows.net/webpifeed/Partners/Kestrel_1.1.pdf&lt;/a&gt;&lt;/p&gt;</content><author><name>Ivan Cai</name></author><summary type="html">Krestrel Server - https://webpifeed.blob.core.windows.net/webpifeed/Partners/Kestrel_1.1.pdf</summary></entry><entry><title type="html">.Net SignalR Intro with Docker Demo</title><link href="http://localhost:4000/backend/Simple-SignalR-App" rel="alternate" type="text/html" title=".Net SignalR Intro with Docker Demo" /><published>2019-01-10T00:00:00+11:00</published><updated>2019-01-10T00:00:00+11:00</updated><id>http://localhost:4000/backend/Simple-SignalR-App</id><content type="html" xml:base="http://localhost:4000/backend/Simple-SignalR-App">&lt;p&gt;This purpose of this page is to give a quick summery of what SignalR is and why we should we use it.
You will see how it works in the &lt;a href=&quot;#demo&quot;&gt;Docker SignalR Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-is-it&quot;&gt;what is it?&lt;/h3&gt;

&lt;p&gt;SignalR is a library used in ASP.Net or .Net Core to provide real-time web functionalities to applications.&lt;/p&gt;

&lt;h3 id=&quot;why-should-i-use-it&quot;&gt;Why should I use it?&lt;/h3&gt;
&lt;p&gt;It uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API&quot;&gt;WebSocket protocol&lt;/a&gt; when browser support is available and falls back to HTTP protocol if necessary. 
The main advantage of using it is that you won’t have to worry about compatibility issues verses implementing WebSocket natively.&lt;/p&gt;

&lt;h3 id=&quot;docker-signalr-demo&quot;&gt;&lt;a id=&quot;demo&quot;&gt;&lt;/a&gt;Docker SignalR Demo&lt;/h3&gt;

&lt;p&gt;To see how it work Open &lt;a href=&quot;http://dockersignalrchat.australiaeast.azurecontainer.io/&quot;&gt;SignalR Chat demo&lt;/a&gt; in two separate browsers in the same or separate devices. Enter different name for each session and start sending messages. You will see the messages are being updated real time.&lt;/p&gt;

&lt;p&gt;You can also run it on your local machine using the following command: &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -t ivancai/dockersignalrchat:latest&lt;/code&gt; if you have docker installed locally.&lt;/p&gt;

&lt;h3 id=&quot;github-repository&quot;&gt;Github Repository&lt;/h3&gt;
&lt;p&gt;My source code for this project is at &lt;a href=&quot;https://github.com/ivanzcai/DockerSignalRChat.git&quot;&gt;https://github.com/ivanzcai/DockerSignalRChat.git&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-do-i-do-it&quot;&gt;How do I do it?&lt;/h3&gt;
&lt;p&gt;Microsoft Doc has an excellent tutorial on how to implement a simple SignalR application so make sure you try it out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/tutorials/signalr?view=aspnetcore-2.2&amp;amp;tabs=visual-studio&quot;&gt;Signal R with Javascript on .Net Core 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My &lt;a href=&quot;http://TobeAdded.com/au&quot;&gt;SignalRChat demo&lt;/a&gt; is based on this tutorial, however I have added Docker support for portability and flexibility.&lt;/p&gt;

&lt;h3 id=&quot;additional-info&quot;&gt;Additional Info&lt;/h3&gt;
&lt;p&gt;For more information, please visit Microsoft’s official &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/signalr/overview/getting-started/introduction-to-signalr&quot;&gt;SignalR Documentation&lt;/a&gt;&lt;/p&gt;</content><author><name>Ivan Cai</name></author><summary type="html">This purpose of this page is to give a quick summery of what SignalR is and why we should we use it. You will see how it works in the Docker SignalR Demo</summary></entry><entry><title type="html">Creating microservices using .NET Core and Docker</title><link href="http://localhost:4000/backend/Creating-DotNet-Microservices" rel="alternate" type="text/html" title="Creating microservices using .NET Core and Docker" /><published>2018-12-19T00:00:00+11:00</published><updated>2018-12-19T00:00:00+11:00</updated><id>http://localhost:4000/backend/Creating-DotNet-Microservices</id><content type="html" xml:base="http://localhost:4000/backend/Creating-DotNet-Microservices">&lt;p&gt;Over the years, software development and architecture has evolved dramatically, more so than perhaps another profession. Gone are the days that yearly software releases are acceptable; now customers or clients are expecting feature to be added and bugs to be fixed with weeks or even days. With the increasing expectation of faster bug fixes and feature update comes at a cost; develop and release updates in a large monolithic system can be painful in many ways. A bug in small update could bring the whole system down if not managed properly. This makes rapid updates to a large complex system rather risky and fragile. To over come this issue, a new type of software architecture has emerged in the past decade with the primary focus of resolve this problem. By separating a large system into a number of small loosely coupled independent components that communicated using a common protocol, it makes the system more resilient to minor issues and less risky when it comes to updates. This style of software design is know as Microservices architecture.&lt;/p&gt;

&lt;h3 id=&quot;microservices-generally-to-have-the-following-characteristics&quot;&gt;Microservices generally to have the following characteristics:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;It should be independent and easily testable in isolation.&lt;/li&gt;
  &lt;li&gt;It should be loosely coupled to other components.&lt;/li&gt;
  &lt;li&gt;horizontally scalable.&lt;/li&gt;
  &lt;li&gt;It’s operation does not depend on the other microservices, meaning that if a related services goes down, the microservice does not go down with it.&lt;/li&gt;
  &lt;li&gt;Each microservice should have clear definition of scope and responsibilities.&lt;/li&gt;
  &lt;li&gt;Communicate over a common, stateless protocol (e.g. HTTP)&lt;/li&gt;
  &lt;li&gt;Microservices in a large system can use different programing language, framework or infrastructure as long as it conform to the communication structure using a standard protocol(Typically RESTful HTTP API)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;net-core-as-a-microservices&quot;&gt;.NET Core as a microservices:&lt;/h3&gt;

&lt;p&gt;Microservices can be written in different programing languages and frameworks running on various type of infrastructures, It can be written in Java, NodeJs, Python or the Traditional .Net Framework. .Net Core is just one of many option out of many that can used.&lt;br /&gt;
If you are experienced in the .NET space, .NET Core is a better option compared to the Traditional .NET framework because it has been designed ground up by Microsoft to be highly portable and flexible. It can be ran on major operation systems such as Linux, Mac and the default Windows servers.&lt;/p&gt;

&lt;h3 id=&quot;create-a-dockerised-web-api&quot;&gt;Create a Dockerised Web API:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Create a new project in VS2017 goto &lt;strong&gt;File &amp;gt; New &amp;gt; Project &amp;gt; ASP.NET Core Web Application&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Enter the &lt;strong&gt;Name&lt;/strong&gt;, &lt;strong&gt;Location&lt;/strong&gt; and &lt;strong&gt;Solution Name&lt;/strong&gt;. I named it &lt;strong&gt;DockerWebAPI&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Choose &lt;strong&gt;.NET Core&lt;/strong&gt;, &lt;strong&gt;ASP.NET Core 2.1&lt;/strong&gt;, Choose &lt;strong&gt;API&lt;/strong&gt; and Tick &lt;strong&gt;Enable Docker Support&lt;/strong&gt;  Click &lt;strong&gt;Ok&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/docker-web-api.PNG&quot; alt=&quot;.NET docker web API &quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Once the project has been created, you will see the &lt;strong&gt;DockerWebApi &amp;gt; Dockerfile&lt;/strong&gt; docker file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Open your &lt;strong&gt;Dockerfile&lt;/strong&gt; and replace the content with the following:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  FROM microsoft/dotnet:sdk AS build-env
  WORKDIR /app

  # Copy csproj and restore as distinct layers
  COPY *.csproj ./

  # use NuGet to restore dependencies and project-specific tools that 
  # are specified in the project file. Can be excluded in .net 2.0
  RUN dotnet restore 

  # Copy everything else and build
  COPY . ./
  RUN dotnet publish -c Release -o out  #folder is out

  # Build runtime image
  FROM microsoft/dotnet:aspnetcore-runtime
  WORKDIR /app
  COPY --from=build-env /app/out .
  ENTRYPOINT [&quot;dotnet&quot;, &quot;WebApplicationDocker.dll&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;If you are using Mac or Windows 10, you change run the application natively in Docker mode
  &lt;img src=&quot;/assets/docker-web-api-run.PNG&quot; alt=&quot;.NET docker web API Run&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are using Windows 8 like me, you will need to install &lt;a href=&quot;https://docs.docker.com/toolbox/toolbox_install_windows/&quot;&gt;Docker Toolbox&lt;/a&gt;. Once installed you can use the Docker CLI tool called &lt;strong&gt;Docker Quickstart Terminal&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/docker-terminal.PNG&quot; alt=&quot;.NET docker terminal&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In the Docker terminal, change directory the root of your project, enter &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker build -t dockerwebapi:latest .&lt;/code&gt;.
If your build is successful you should see **successfully built &lt;imageid&gt; **&lt;/imageid&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To check if your build image has been created, enter: &lt;code class=&quot;highlighter-rouge&quot;&gt;docker images&lt;/code&gt;
You should see &lt;strong&gt;dockerwebapi&lt;/strong&gt; on the top of the list of repositories returned by the command.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To test the build, You can run
&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -d -p 8080:80 --name mydockerwebapi dockerwebapi&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are running native docker on your machine, &lt;a href=&quot;http://localhost:8080/api/values&quot;&gt;http://localhost:8080/api/values&lt;/a&gt;&lt;br /&gt;
If you are using Docker tools, goto &lt;a href=&quot;http://192.168.99.100:8080/api/values&quot;&gt;http://192.168.99.100:8080/api/values&lt;/a&gt;
You should the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[
&quot;value1&quot;,
&quot;value2&quot;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Congrats! you have created your first Dotnet Core Webapi microservices on Docker!&lt;/p&gt;</content><author><name>Ivan Cai</name></author><summary type="html">Over the years, software development and architecture has evolved dramatically, more so than perhaps another profession. Gone are the days that yearly software releases are acceptable; now customers or clients are expecting feature to be added and bugs to be fixed with weeks or even days. With the increasing expectation of faster bug fixes and feature update comes at a cost; develop and release updates in a large monolithic system can be painful in many ways. A bug in small update could bring the whole system down if not managed properly. This makes rapid updates to a large complex system rather risky and fragile. To over come this issue, a new type of software architecture has emerged in the past decade with the primary focus of resolve this problem. By separating a large system into a number of small loosely coupled independent components that communicated using a common protocol, it makes the system more resilient to minor issues and less risky when it comes to updates. This style of software design is know as Microservices architecture.</summary></entry><entry><title type="html">Building your first Docker .Net core MVC image</title><link href="http://localhost:4000/backend/Create-MVC-docker-image" rel="alternate" type="text/html" title="Building your first Docker .Net core MVC image" /><published>2018-12-17T00:00:00+11:00</published><updated>2018-12-17T00:00:00+11:00</updated><id>http://localhost:4000/backend/Create-MVC-docker-image</id><content type="html" xml:base="http://localhost:4000/backend/Create-MVC-docker-image">&lt;p&gt;Once you have some idea of what Docker is and how you can download docker images and learnt how to &lt;a href=&quot;Running-Docker-and-DotNet&quot;&gt;run .NET Core on docker&lt;/a&gt; on your own machine, you are ready to learn how we can create and customise docker image for deployment.&lt;/p&gt;

&lt;h3 id=&quot;create-and-use-a-docker-file&quot;&gt;Create and use a docker file&lt;/h3&gt;

&lt;p&gt;To enable your application to use Docker, first you will need to create a &lt;strong&gt;Dockerfile&lt;/strong&gt; in your .NET Core project. If you want to learn more about Dockerfile configuration. please see docker &lt;a href=&quot;https://docs.docker.com/reference/&quot;&gt;reference documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The way it works is that when you enter &lt;strong&gt;docker build&lt;/strong&gt; command, docker builds an image from from a &lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM microsoft/dotnet:sdk AS build-env
WORKDIR /app

# Copy csproj and restore as distinct layers
COPY *.csproj ./
RUN dotnet restore

# Copy everything else and build
COPY . ./
RUN dotnet publish -c Release -o out

# Build runtime image
FROM microsoft/dotnet:aspnetcore-runtime
WORKDIR /app
COPY --from=microsoft/dotnet:sdk /app/out .
ENTRYPOINT [&quot;dotnet&quot;, &quot;aspnetapp.dll&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Ivan Cai</name></author><summary type="html">Once you have some idea of what Docker is and how you can download docker images and learnt how to run .NET Core on docker on your own machine, you are ready to learn how we can create and customise docker image for deployment.</summary></entry><entry><title type="html">Running .Net core MVC on docker</title><link href="http://localhost:4000/backend/Running-Docker-and-DotNet" rel="alternate" type="text/html" title="Running .Net core MVC on docker" /><published>2018-12-14T00:00:00+11:00</published><updated>2018-12-14T00:00:00+11:00</updated><id>http://localhost:4000/backend/Running-Docker-and-DotNet</id><content type="html" xml:base="http://localhost:4000/backend/Running-Docker-and-DotNet">&lt;p&gt;This article will show you how to run a simple .Net core in a Docker container.&lt;/p&gt;

&lt;p&gt;the advantages of running your .NET Core MVC App on a containerised environment are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Flexible to deploy&lt;/li&gt;
  &lt;li&gt;Better scalability with the right architecture&lt;/li&gt;
  &lt;li&gt;Enhance resilience with the right architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Some experience of running Docker. If not please see &lt;a href=&quot;https://www.docker.com/get-started&quot;&gt;Get started with Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Some experience with .Net Web API development. If not please see &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-2.2&amp;amp;tabs=visual-studio&quot;&gt;Create a web API with ASP.NET Core MVC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Some context of what Microservices is all about and what role Docker can play in the grand scheme of things. Please checkout &lt;a href=&quot;https://www.youtube.com/watch?v=3cvCtovrKWg&quot;&gt;Docker Demo and Microservices Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;where-to-get-the-right-docker-images&quot;&gt;Where to get the right docker images&lt;/h3&gt;

&lt;p&gt;Microsoft has created official Docker images and made publicly available on Docker Hub. 
There are multiple responsitories that you can download and each repository has multiple images with various versions of .NET and OS.
&lt;a href=&quot;https://hub.docker.com/r/microsoft/dotnet/&quot;&gt;Microsoft Docker Hub Repositories&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;lets-get-started&quot;&gt;Lets Get Started&lt;/h3&gt;

&lt;h4 id=&quot;install-docker&quot;&gt;Install Docker&lt;/h4&gt;
&lt;p&gt;First you will need to install docker Desktop on your development machine&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/editions/community/docker-ce-desktop-windows&quot;&gt;Windows 10 Docker Destop&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/editions/community/docker-ce-desktop-mac&quot;&gt;Mac Docker Destop&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are using Windows 8 or below, you will need to use docker tool box, it can be a little bit tricky so take your time and follow the instructions carefully.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/toolbox/toolbox_install_windows/&quot;&gt;Windows 8 - Docker Toolbox&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;running-a-net-console-app-in-docker&quot;&gt;Running a .NET Console App in Docker&lt;/h4&gt;
&lt;p&gt;To create a simple console app in a Linux container, open your docker console and run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Console&quot;&gt;docker run --rm microsoft/dotnet-samples
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If it ran successfully, The console will return  &lt;strong&gt;Hello from .NET Core!&lt;/strong&gt; and an image of a cartoon robot.&lt;/p&gt;

&lt;h4 id=&quot;running-a-net-mvc-web-app-in-docker&quot;&gt;Running a .NET MVC Web App in Docker&lt;/h4&gt;
&lt;p&gt;Type the following command to run a sample web application:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it --rm -p 8000:80 --name aspnetcore_sample microsoft/dotnet-samples:aspnetapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To test it, in windows 10 or Mac goto &lt;strong&gt;http://localhost:8000&lt;/strong&gt;
If you are using Docker Toolbox in Windows 8 goto &lt;strong&gt;http://192.168.99.100:8000/&lt;/strong&gt;
Now you should see the sample .NET MVC web app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/docker-dotnet-mvc.PNG&quot; alt=&quot;.NET mvc app docker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it! you have successfully ran your first .NET MVC app on your local Docker container!&lt;/p&gt;</content><author><name>Ivan Cai</name></author><summary type="html">This article will show you how to run a simple .Net core in a Docker container.</summary></entry><entry><title type="html">Introduction to .NET Core Deployment Options</title><link href="http://localhost:4000/backend/Intro-Dotnet-Core-Deployment" rel="alternate" type="text/html" title="Introduction to .NET Core Deployment Options" /><published>2018-12-12T00:00:00+11:00</published><updated>2018-12-12T00:00:00+11:00</updated><id>http://localhost:4000/backend/Intro-Dotnet-Core-Deployment</id><content type="html" xml:base="http://localhost:4000/backend/Intro-Dotnet-Core-Deployment">&lt;p&gt;This post, I will give you an overview of .NET Core deployment options
There are three types of .NET core application deployments, those are:&lt;/p&gt;

&lt;h3 id=&quot;1-framework-dependent-deploymentfdd&quot;&gt;1. Framework-dependent deployment(FDD)&lt;/h3&gt;

&lt;p&gt;This type of deployment relies on the existing version of .NET Core on the system. The application only contains the application code and any third-party packages outside of the .NET Core libraries. It should have  &lt;em&gt;.dll&lt;/em&gt; files that can be run from command line  console dotnet myapp.dll&lt;/p&gt;

&lt;h4 id=&quot;pros&quot;&gt;Pros&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;No need to define target operation system&lt;/li&gt;
  &lt;li&gt;Small deployment package size&lt;/li&gt;
  &lt;li&gt;Runs latest patched version of .NET Core runtime(unless specified)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cons&quot;&gt;Cons&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;No control of .NET Core libraries version&lt;/li&gt;
  &lt;li&gt;Risk of mismatch of .NET Core libraries and runtimes, it might change the behaviour of the application or not run at all.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;usecase&quot;&gt;Usecase&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;This deployment is useful for deploying to stable dedicated environment where changes to .NET Core dependencies are well managed and documented.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-self-contained-deploymentscd&quot;&gt;2. Self-contained deployment(SCD):&lt;/h3&gt;
&lt;p&gt;As the name have suggested, this deployment type contains all the components needed for the application to run, this includes the .NET Core libraries and runtime. It contains executable files with &lt;em&gt;.exe&lt;/em&gt; extensions.&lt;/p&gt;

&lt;h4 id=&quot;pros-1&quot;&gt;Pros&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Complete control of the .NET Core version and assured that the hosting system can run the .NET Core app since it’s provided in the deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cons-1&quot;&gt;Cons&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Large deployment package as all the .NET Core libraries are included.&lt;/li&gt;
  &lt;li&gt;Larger memory foot print if multiple .NET Core applications are running in the same target system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;usecase-1&quot;&gt;Usecase&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;When you unsure of the target system can support your application. This deployment type will give you more control and certainty in your deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-framework-dependent-executablesfde&quot;&gt;3. Framework-dependent executables(FDE):&lt;/h3&gt;
&lt;p&gt;This deployment type contains executables (&lt;em&gt;.exe&lt;/em&gt;) that depends on existing system wide .NET Core libraries and runtime to run.&lt;/p&gt;

&lt;h4 id=&quot;pros-2&quot;&gt;Pros&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Similar to FDD, you will have a small package size since .NET Core libraries and runtime are excluded.&lt;/li&gt;
  &lt;li&gt;Smaller memory and disk space footprint in a multi .NET applications are running in the same environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cons-2&quot;&gt;Cons&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Lack of control on the version of .NET Core Libraries and runtime.&lt;/li&gt;
  &lt;li&gt;The app needs to be published for each platform.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;usecase-2&quot;&gt;Usecase&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;When you unsure of the target system can support your application. This deployment type will give you more control and certainty in your deployment.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Ivan Cai</name></author><summary type="html">This post, I will give you an overview of .NET Core deployment options There are three types of .NET core application deployments, those are:</summary></entry><entry><title type="html">Intro To Gulp</title><link href="http://localhost:4000/frontend/Intro-To-Gulp" rel="alternate" type="text/html" title="Intro To Gulp" /><published>2018-12-11T00:00:00+11:00</published><updated>2018-12-11T00:00:00+11:00</updated><id>http://localhost:4000/frontend/Intro-To-Gulp</id><content type="html" xml:base="http://localhost:4000/frontend/Intro-To-Gulp">&lt;p&gt;Gulp is a javascript task runner and automation tool that are typically used by developers to perform repetitive tasks typically within the CI/CD devops workflow.&lt;/p&gt;

&lt;p&gt;Those tasks included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CSS compilation via Less or Sass.&lt;/li&gt;
  &lt;li&gt;Move or coping files to an output directory for deployment.&lt;/li&gt;
  &lt;li&gt;Running unit testss and code analysis.&lt;/li&gt;
  &lt;li&gt;Minifying and bundling javascript libraries and CSS style sheets.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;install-gulp&quot;&gt;Install Gulp&lt;/h2&gt;

&lt;p&gt;The best way to install Gulp is via npm(Node Package Manager), if you are not familiar with npm please visit the &lt;a href=&quot;https://www.npmjs.com/get-npm&quot;&gt;www.npmjs.com&lt;/a&gt; for more detail.&lt;/p&gt;

&lt;p&gt;I recommand that you install gulp from npm locally within your frontend application project. however you can also install Gulp globally if you wish.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open a console and change directory to your project root
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;cd yourproject
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Install Gulp on your project locally
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;npm install --save-dev gulp
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The &lt;strong&gt;–save-dev&lt;/strong&gt; option will add the package to development section of your &lt;strong&gt;package.json&lt;/strong&gt; file. Since Gulp will be used to assist build and deployment automations, it is not required in the production environment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now it’s time to creat a test gulpfile. create a gulpfile.js in your project root with the following contents:
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'gulp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'test-task'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'success!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Run the task by entering the command below
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;gulp test-task
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;You should get &lt;strong&gt;success!&lt;/strong&gt; back as a result.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;If want to learn more on Gulp please see https://github.com/ivanzcai/gulp-demo for more detail!&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ivan</name></author><summary type="html">Gulp is a javascript task runner and automation tool that are typically used by developers to perform repetitive tasks typically within the CI/CD devops workflow.</summary></entry></feed>